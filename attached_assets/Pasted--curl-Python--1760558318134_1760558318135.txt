我们将分两步走：
第一步：快速验证 (用curl命令) - 这是最快、最直接的方法，用来确认您的密钥是有效的。
第二步：编写Python代码 - 将这个功能集成到您的网站中。
第一步：快速验证您的API密钥
我们将使用您服务商提供的curl命令，在Replit的终端(Shell)里直接测试“文生图”功能。
打开Replit的Shell：
在您的Replit项目界面的右侧，通常会有一个显示代码输出的窗口。在这个窗口的顶部，找到并点击 Shell 标签页。
您会看到一个黑色的命令行窗口，可以在里面输入命令。
准备您的curl命令：
请完整复制下面这个代码块。我已经将示例中的密钥替换成了您提供的密钥 sk-4i7...。
code
Bash
curl --location 'https://ai.juguang.chat/v1beta/models/gemini-2.5-flash-image-preview:generateContent' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer sk-4i7CZVlFeglKEDfSwPU0qie0ZgDYIlnsp0rBgdINm6foubVs' \
--data '{
      "contents": [{
        "parts": [{
          "text": "生成一张非常可爱的白色小猫的特写照片，眼睛是蓝色的，背景是模糊的花园"
        }]
      }]
    }'
执行命令：
将上面整段命令粘贴到您打开的Shell窗口中。
按下 Enter 键。
检查结果：
如果成功：您应该会看到Shell窗口中返回了一大串以 {"candidates": ...} 开头的文本（JSON格式）。在这段文本里，您会找到一个很长的、由随机字符组成的字符串，这就是图片的base64编码。看到这个，就代表您的API密钥是有效的！
如果失败：如果您看到任何包含 error、invalid api key 或 authentication error 字样的返回信息，请仔细检查您复制的curl命令中的密钥是否与您购买的完全一致，确保没有多余的空格或字符。
第二步：在您的网站中用Python代码调用API
测试成功后，我们现在把它写成Python代码，这样您的网站就能真正地使用它了。
创建或打开一个Python文件：
在您Replit项目界面的左侧文件列表中，找到您网站的后端逻辑文件（例如 main.py 或 app.py）。
或者，您可以先创建一个新文件 api_call_test.py 来单独测试。
编写Python代码：
请完整复制下面的Python代码，并粘贴到您的文件中。
我已经将您的密钥填入了代码中。
code
Python
import requests
import json
import os
import base64 # 导入这个库用来解码图片

# --- 1. 配置您的密钥和API地址 ---
# 【最佳实践】强烈建议您将密钥保存在Replit的Secrets中，而不是直接写在代码里。
# 我们先直接写在这里进行测试。
API_KEY = "sk-4i7CZVlFeglKEDfSwPU0qie0ZgDYIlnsp0rBgdINm6foubVs"
IMAGE_API_URL = "https://ai.juguang.chat/v1beta/models/gemini-2.5-flash-image-preview:generateContent"

def generate_image(prompt_text):
    """
    使用聚光Chat的中转API来生成图片。
    :param prompt_text: 图片的文字描述。
    :return: 成功时返回保存的图片文件名，失败时返回None。
    """
    print(f"正在根据描述生成图片: '{prompt_text}'")
    
    # --- 2. 准备请求头和数据 ---
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {API_KEY}'
    }
    
    payload = json.dumps({
      "contents": [{
        "parts": [{
          "text": prompt_text
        }]
      }]
    })

    # --- 3. 发送请求 ---
    try:
        response = requests.post(IMAGE_API_URL, headers=headers, data=payload)
        # 检查请求是否成功 (状态码 200)
        response.raise_for_status() 
        
        # --- 4. 解析返回结果并保存图片 ---
        result = response.json()
        
        # 从返回的JSON中提取图片的base64编码数据
        # 注意：路径可能因API返回格式变化而变化，请根据实际情况调整
        image_base64_data = result['candidates'][0]['content']['parts'][0]['inlineData']['data']
        
        # 解码base64数据并保存为图片文件
        image_data = base64.b64decode(image_base64_data)
        
        output_filename = "generated_image.png"
        with open(output_filename, "wb") as f:
            f.write(image_data)
        
        print(f"图片生成成功！已保存为: {output_filename}")
        return output_filename

    except requests.exceptions.RequestException as e:
        print(f"API请求失败: {e}")
        print("服务器返回内容:", response.text if 'response' in locals() else "无返回")
        return None
    except (KeyError, IndexError) as e:
        print(f"解析返回的JSON数据失败: {e}")
        print("收到的原始数据:", response.text)
        return None

# --- 这是一个直接运行本文件的测试示例 ---
if __name__ == '__main__':
    # 您可以在这里修改为您想生成的任何画面
    prompt = "一个宇航员，骑着一匹发光的机械马，驰骋在彩虹色的星云之上，数字艺术风格"
    generate_image(prompt)
运行Python代码：
回到您Replit的 Shell 标签页。
输入命令 python api_call_test.py (请确保文件名与您创建的一致)。
按下 Enter 键。
检查结果：
您应该会在Shell中看到 “图片生成成功！...” 的提示。
同时，在您Replit项目左侧的文件列表中，应该会出现一个新文件，名为 generated_image.png。您可以点击它来查看AI生成的图片。
最后一步：集成到您的网站并使用Secrets（安全实践）
测试成功后，您需要：
将密钥存入Secrets：
在Replit左侧工具栏，点击锁形图标 🔒 (Secrets)。
创建一个新的Secret：
Key: JUGUANG_API_KEY
Value: sk-4i7CZVlFeglKEDfSwPU0qie0ZgDYIlnsp0rBgdINm6foubVs
修改代码以使用Secrets：
将代码中的 API_KEY = "sk-..." 这一行，修改为：
API_KEY = os.environ.get("JUGUANG_API_KEY")
集成函数：
将 generate_image(prompt_text) 这个函数，集成到您网站的后端逻辑中。例如，当用户在前端点击“生成”按钮时，您的后端就调用这个函数。